import os
from typing import Optional, Union

import telebot
from telebot.types import Message

from .constants import DEBUG_MODE, TG_NOTIFICATIONS_ROTATING_FILE
from .loggers import LoggerFactory
from .utils import Config
from .wraps import retry

tg_manager_config = {
    'TG_TOKEN': os.getenv('TG_TOKEN'),
    'TG_DEFAULT_USER_ID': os.getenv('TG_DEFAULT_USER_ID'),
}
Config.validate_env_variables(tg_manager_config)


class TelegramNotifier:

    logger = LoggerFactory(
        __name__, TG_NOTIFICATIONS_ROTATING_FILE
    ).get_logger()
    max_msg_len = 4096

    def __init__(self, token: str, default_chat_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞

        Args:
            token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
            default_chat_id (str): ID —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            (–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É @userinfobot)
        """
        self.token = token
        self.default_chat_id = default_chat_id
        self.bot = telebot.TeleBot(self.token, parse_mode='Markdown')

    def _format_message(
        self, level: str, message: str, emoji: str = ''
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        level_text = level.upper()

        if emoji:
            return f'{emoji} _{level_text}_\n{message}'
        else:
            return f'_{level_text}_\n{message}'

    @retry(logger)
    def _send_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True,
    ) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            default_chat_id)
            disable_web_page_preview (bool): –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ.

        Returns:
            Message: –û–±—ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        target_chat_id = chat_id or self.default_chat_id
        valid_text = (
            f'{message[:self.max_msg_len - 3]}...'
        ) if len(message) > self.max_msg_len else message

        return self.bot.send_message(
            chat_id=target_chat_id,
            text=valid_text,
            disable_web_page_preview=disable_web_page_preview,
        )

    def send_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –æ—à–∏–±–æ–∫.

        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫

        Returns:
            Optional[Message]: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
        """
        try:
            return self._send_message(
                message, chat_id, disable_web_page_preview)
        except Exception as e:
            self.logger.exception(
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}:\n{e}')
            return None

    def send_debug_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        if not DEBUG_MODE:
            return
        formatted_message = self._format_message('debug', message, '‚öôÔ∏è')
        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_info_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        formatted_message = self._format_message('info', message, '‚ÑπÔ∏è')
        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_success_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        formatted_message = self._format_message('success', message, '‚úÖ')
        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_warning_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        formatted_message = self._format_message('warning', message, '‚ö†Ô∏è')
        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_error_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        formatted_message = self._format_message('error', message, '‚ùå')
        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_critical_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        formatted_message = self._format_message('critical', message, '‚ùóÔ∏è')
        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_custom_message(
        self,
        message: str,
        level: Optional[str] = None,
        emoji: Optional[str] = None,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π)
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            emoji: Emoji –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫

        Returns:
            Optional[Message]: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
        """
        if level:
            formatted_message = self._format_message(
                level, message, emoji or '')
        else:
            formatted_message = message  # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

        return self.send_message(
            formatted_message, chat_id, disable_web_page_preview)

    def send_plain_message(
        self,
        message: str,
        chat_id: Optional[Union[str, int]] = None,
        disable_web_page_preview: bool = True
    ) -> Optional[Message]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π)
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫

        Returns:
            Optional[Message]: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ None
        """
        return self.send_message(message, chat_id, disable_web_page_preview)

    def send_startup_notification(self, script_name: str):
        message = f'```{script_name}```\n–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω ‚è∞'
        self.send_debug_message(message)

    def send_success_notification(self, script_name: str):
        message = f'```{script_name}```\n–°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É üí°'
        self.send_debug_message(message)

    def send_first_success_notification(self, script_name: str):
        message = (
            f'```{script_name}```\n–ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω  üèÅ')
        self.send_success_message(message)

    def send_warning_counter_notification(
        self, script_name: str, err_count: int, total: int
    ):
        message = (
            f'```{script_name}```\n–ï—Å—Ç—å –æ—à–∏–±–∫–∏ (*{err_count}/{total}*) üìä')
        self.send_warning_message(message)

    def send_error_notification(self, script_name: str, err: Exception):
        message = (
            f'```{script_name}```\n–£–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π *{type(err).__name__}* ü•ä')
        self.send_error_message(message)

    def broadcast_message(
        self,
        message: str,
        chat_ids: list,
        disable_web_page_preview: bool = True
    ) -> dict:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —á–∞—Ç–∞–º.

        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (—Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π)
            chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
        """
        results = {}
        for chat_id in chat_ids:
            try:
                message_obj = self.send_message(
                    message, chat_id, disable_web_page_preview)
                results[chat_id] = {
                    'success': True,
                    'message_id': (
                        message_obj.message_id) if message_obj else None
                }
            except Exception as e:
                results[chat_id] = {
                    'success': False,
                    'error': str(e)
                }
        return results

    def check_debug_mode(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∂–∏–º DEBUG –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        if DEBUG_MODE:
            message = (
                '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ *–æ—Ç–ª–∞–¥–æ—á–Ω–æ–º* —Ä–µ–∂–∏–º–µ.\n'
                '–≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!'
            )
            tg_manager.send_warning_message(message)
        else:
            message = (
                '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ *production* —Ä–µ–∂–∏–º–µ.\n'
                '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'
            )
            tg_manager.send_success_message(message)


tg_manager = TelegramNotifier(
    token=tg_manager_config['TG_TOKEN'],
    default_chat_id=tg_manager_config['TG_DEFAULT_USER_ID']
)
