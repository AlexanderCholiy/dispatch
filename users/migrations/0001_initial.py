# Generated by Django 4.2.20 on 2025-08-19 10:14

import django.contrib.auth.models
import django.contrib.auth.password_validation
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PendingUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='Имя пользователя должно содержать минимум 4 символов. Допустимые символы: латинские буквы, цифры и .-_', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Недопустимые символы в имени пользователя. Разрешены только: английские буквы, цифры и . - _', regex='^[a-zA-Z0-9._-]+$'), django.core.validators.MinLengthValidator(limit_value=4, message='Имя пользователя должно содержать минимум 4 символа.'), users.validators.validate_pending_username], verbose_name='Имя пользователя')),
                ('email', models.EmailField(help_text='Введите адрес электронной почты', max_length=254, unique=True, validators=[users.validators.validate_pending_email], verbose_name='Почта')),
                ('password', models.CharField(help_text='Пароль должен содержать минимум 8 символов, не может быть полностью числовым, не должен быть похож на имя пользователя и не должен быть слишком простым.', max_length=128, validators=[django.contrib.auth.password_validation.MinimumLengthValidator.validate, django.contrib.auth.password_validation.UserAttributeSimilarityValidator.validate, django.contrib.auth.password_validation.CommonPasswordValidator.validate, django.contrib.auth.password_validation.NumericPasswordValidator.validate])),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата регистрации')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'регистрация пользователя',
                'verbose_name_plural': 'Регистрация пользоватей',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Введите адрес электронной почты', max_length=254, unique=True, validators=[users.validators.validate_user_email], verbose_name='Email')),
                ('username', models.CharField(help_text='Имя пользователя должно содержать минимум 4 символов. Допустимые символы: латинские буквы, цифры и .-_', max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Недопустимые символы в имени пользователя. Разрешены только: английские буквы, цифры и . - _', regex='^[a-zA-Z0-9._-]+$'), django.core.validators.MinLengthValidator(limit_value=4, message='Имя пользователя должно содержать минимум 4 символа.'), users.validators.validate_user_username], verbose_name='Имя пользователя')),
                ('avatar', models.ImageField(blank=True, help_text='Загрузите аватар пользователя в формате JPG или PNG', null=True, upload_to='users/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])], verbose_name='Аватар')),
                ('role', models.CharField(choices=[('guest', 'Гость'), ('user', 'Пользователь'), ('dispatch', 'Диспетчер')], default='guest', help_text='Выберите роль пользователя', max_length=16, verbose_name='Роль')),
                ('date_of_birth', models.DateField(blank=True, help_text='Формат: ГГГГ-ММ-ДД', null=True, verbose_name='Дата рождения')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
